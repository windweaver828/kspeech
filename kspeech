#!/usr/bin/env python

import sys, signal, gobject, subprocess, gst, pygst, Process, os

Process.chgProcessName("kspeech")

##---------- Config Directories -----------##
conf_dir = os.path.expanduser("~/.config/kspeech")
command_file = os.path.join(conf_dir, "commands.conf")
strings_file = os.path.join(conf_dir, "sentences.corpus")
lang_file = os.path.join(conf_dir, "lm")
dic_file = os.path.join(conf_dir, "dic")
scommand_file = os.path.join(conf_dir, "master")

##------------ Recognizer Utilizing pocketshpinx ------------------##
class Recognizer(gobject.GObject):
    __gsignals__ = {'finished' : (gobject.SIGNAL_RUN_LAST, gobject.TYPE_NONE, (gobject.TYPE_STRING,))}
    def __init__(self, language_file, dictionary_file, src = None):
        gobject.GObject.__init__(self)
        if src:
            audio_src = 'alsasrc device="hw:%d,0"' % (src)
        else:
            audio_src = 'autoaudiosrc'
        cmd = audio_src+' ! audioconvert ! audioresample ! vader name=vad ! pocketsphinx name=asr ! appsink sync=false'
        self.pipeline=gst.parse_launch(cmd)       
        asr=self.pipeline.get_by_name('asr')
        asr.connect('result', self.result)
        asr.set_property('lm', language_file)
        asr.set_property('dict', dictionary_file)
        asr.set_property('configured', True)
        self.vad = self.pipeline.get_by_name('vad')
        self.vad.set_property('auto-threshold',True)

    def listen(self):
        self.pipeline.set_state(gst.STATE_PLAYING)

    def result(self, asr, text, uttid):
        self.emit("finished", text)

##---------------- Implementation of recognizer -----------------##
class Kspeech:
    def __init__(self):
        self.continuous_listen = True
        self.recognizer = Recognizer(lang_file, dic_file)
        self.recognizer.connect('finished', self.recognizer_finished)
        self.active=True

    def run_command(self, cmd):
        subprocess.call('python '+scommand_file+" "+cmd, shell=True)
        
    def recognizer_finished(self, recognizer, text):
        t = text.lower()
        
        # Basically a pause for the recognizer
        if 'stop listening' in t:
            self.active = False
                               
        # Start listening command
        elif "sara" == t:
            sentence = "I am here"
            os.popen('echo , "'+sentence+'" | festival --tts')
            self.active = True        
        if self.active == True:
            # Creates a popup window with the recognized command lasts 2 seconds 
            subprocess.Popen("popup "+text, shell=True)
            # passes all possible commands to master(scommand) for processing
            self.run_command(t)
        elif t.startswith("sara"):
            self.run_command(t)

    def run(self):
        self.active=False
        kspeech.recognizer.listen()
        
if __name__ == "__main__":
    kspeech = Kspeech()
    gobject.threads_init()
    main_loop = gobject.MainLoop()
    signal.signal(signal.SIGINT, signal.SIG_DFL)
    kspeech.run()
    main_loop.run()
